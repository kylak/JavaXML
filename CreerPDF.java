import java.io.FileNotFoundException;import java.io.FileOutputStream;import com.itextpdf.text.Document;import com.itextpdf.text.DocumentException;import com.itextpdf.text.Paragraph;import com.itextpdf.text.pdf.PdfWriter;import com.itextpdf.text.Font;import com.itextpdf.text.pdf.BaseFont;import java.io.IOException;import com.itextpdf.text.Element;import com.itextpdf.text.pdf.PdfPCell;import com.itextpdf.text.pdf.PdfPTable;import com.itextpdf.text.Phrase;import com.itextpdf.text.pdf.PdfContentByte;class CreerPDF {    String manuscrit = "";    String nom = "";    Font font;    public CreerPDF(String futurePDF, String nom) throws DocumentException, IOException {        manuscrit = futurePDF;        this.nom = nom;        creerUneFont();    }       void creerUneFont() throws DocumentException, IOException {       BaseFont koine = BaseFont.createFont("/Users/gustavberloty/Library/Fonts/KoineGreek.ttf", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);       koine.setSubset(true);       font = new Font(koine, 13f);    }    public void generer()    {        Document document = new Document();        try        {            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(nom + ".pdf"));            /*ParagraphBorder border = new ParagraphBorder();            writer.setPageEvent(border);*/            document.open();                        String[] page = manuscrit.split("\n\n"); // On stock le texte du manuscrit par ses pages, avec: page[n°page du manuscrit]            String[][] ligne = new String[page.length][]; // On stock toutes les lignes du manuscrit sous la forme: ligne[n°page][n°ligne de la page]                        class Longerline {                int page;                int line;                                public Longerline(int p, int l) {                    this.page = p;                    this.line = l;                }                                public String getText(String[][] txt) {                    return txt[page][line];                }                                public float getWidth(PdfContentByte pcb, String[][] txt) {                    return pcb.getEffectiveStringWidth(getText(txt), true);                }            }                        Longerline maxLine = new Longerline(0,0);                        // Pour trouver la ligne la plus longue du manuscrit                for(int i=0; i < page.length; i++){                    ligne[i] = page[i].split("\n");                    for(int j = 0; j < ligne[i].length; j++) {                        if(ligne[i][j].length() > maxLine.getText(ligne).length()){                            maxLine.page = i;                            maxLine.line = j;                        }                    }                }                        System.out.println("La ligne la plus longue trouvé est à la page " + maxLine.page + " et à la ligne " + maxLine.line + ".\n Voici ce qui est écrit: " + maxLine.getText(ligne) + "\n Il y a " + maxLine.getText(ligne).length() + " caractères qui ont été comptés.");                        for (int i=0; i < page.length; i++) {                                document.newPage();                PdfPCell header = new PdfPCell(new Phrase("Livre chapitre"));                header.setHorizontalAlignment(Element.ALIGN_CENTER);                header.setVerticalAlignment(Element.ALIGN_MIDDLE);                PdfPTable body = new PdfPTable(1);                PdfPTable corpsCorps = new PdfPTable(3);                corpsCorps.setWidths(new int[]{ 1, 20, 1});                System.out.println();                                for(int j = 0; j < ligne[i].length; j++) { // On créer de nouvelles (3) cellules de tableau pour chaque ligne et on remplit ces cellules par le numéro de verset si présent et le texte de la ligne.                    corpsCorps.addCell(Integer.toString(j+1));                    corpsCorps.addCell("phrase très très longue eeeeeeeeeeeeeeeeeeeeeeeeeee test");                    System.out.println(ligne[i][j]);                    corpsCorps.addCell(Integer.toString(j+1));                }                                PdfPCell corps = new PdfPCell(corpsCorps);                PdfPCell footer = new PdfPCell(new Phrase("p." + (i+1)));                footer.setHorizontalAlignment(Element.ALIGN_CENTER);                footer.setVerticalAlignment(Element.ALIGN_MIDDLE);                                body.addCell(header);                body.addCell(corps);                body.addCell(footer);                                document.add(body);                            }                        // grec                        document.close();        } catch (DocumentException e)        {            e.printStackTrace();        } catch (FileNotFoundException e)        {            e.printStackTrace();        }    }}