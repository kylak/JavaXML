import java.io.FileNotFoundException;import java.io.FileOutputStream;import com.itextpdf.text.Document;import com.itextpdf.text.DocumentException;import com.itextpdf.text.Paragraph;import com.itextpdf.text.pdf.PdfWriter;import com.itextpdf.text.Font;import com.itextpdf.text.pdf.BaseFont;import java.io.IOException;import com.itextpdf.text.Element;import com.itextpdf.text.pdf.PdfPCell;import com.itextpdf.text.pdf.PdfPTable;import com.itextpdf.text.Phrase;import com.itextpdf.text.pdf.PdfContentByte;import java.io.BufferedWriter;import java.io.FileWriter;import java.util.ArrayList;import java.util.Arrays;class CreerPDF {    String manuscrit = "";    String nom = "";    Font font;    public CreerPDF(String futurePDF, String nom) throws DocumentException, IOException {        manuscrit = futurePDF;        this.nom = nom;        creerUneFont();    }       void creerUneFont() throws DocumentException, IOException {       BaseFont koine = BaseFont.createFont("/Users/gustavberloty/Library/Fonts/KoineGreek.ttf", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);       koine.setSubset(true);       font = new Font(koine, 13f);    }    public void generer() throws IOException    {        Document document = new Document();        try        {            PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(nom + ".pdf"));            /*ParagraphBorder border = new ParagraphBorder();            writer.setPageEvent(border);*/            document.open();            String[] page = manuscrit.split("\n\n"); // On stock le texte du manuscrit par ses pages, avec: page[n°page du manuscrit]`            String[][] ligne = new String[page.length][]; // On stock toutes les lignes du manuscrit sous la forme:` ligne[n°page][n°ligne de la page]                        class Longerline {                int page;                int line;                                public Longerline(int p, int l) {                    this.page = p;                    this.line = l;                }                                public String getText(String[][] txt) {                    return txt[page][line];                }                                public float getWidth(PdfContentByte pcb, String[][] txt) {                    return pcb.getEffectiveStringWidth(getText(txt), true);                }            }                        Longerline maxLine = new Longerline(0,0);                        // Pour trouver la ligne la plus longue du manuscrit                for(int i=0; i < page.length; i++){                    ligne[i] = page[i].split("\n");                    for(int j = 0; j < ligne[i].length; j++) {                        if(ligne[i][j].length() > maxLine.getText(ligne).length()){                            maxLine.page = i;                            maxLine.line = j;                        }                    }                }                        System.out.println("La ligne la plus longue trouvé est à la page " + maxLine.page + " et à la ligne " + maxLine.line + ".\n Voici ce qui est écrit: " + maxLine.getText(ligne) + "\n Il y a " + maxLine.getText(ligne).length() + " caractères qui ont été comptés.");                         String str = "% !TEX encoding = UTF-8 Unicode\n \\documentclass[a4paper, 11pt]{book}\n \\usepackage[utf8]{inputenc}\n \\usepackage[french]{babel}\n \\usepackage[T1]{fontenc}\n \\usepackage{fontspec}\n \\usepackage{lmodern}\n \\usepackage{array}\n \\usepackage{verbatim}\n \\title{\"GA 032\"}\n \\usepackage{layout}\n \\usepackage[nomarginpar, margin=0.7in]{geometry}\n \\pagestyle{plain}\n \\usepackage{polyglossia}\n \\setmainlanguage{french}\n \\setotherlanguage{greek}\n \\newfontfamily\\greekfont{KoineGreek}\n\\newcommand\\Pheader{\\rule[-2ex]{0pt}{5ex}}\n\\newsavebox\\TBox\n\\def\\textoverline#1{\\savebox\\TBox{#1}%\n\\makebox[0pt][l]{#1}\\rule[1.1\\ht\\TBox]{\\wd\\TBox}{0.7pt}}\n % amélioration : ajouter un \"padding\" sur le tabular + agrandir le tabular et son contenu.\n \\begin{document}\n %\\layout\n \\maketitle\n";                BufferedWriter writer2 = new BufferedWriter(new FileWriter("test.tex"));                writer2.write(str);                    for (int i=0; i < page.length; i++) {                                document.newPage();                PdfPCell header = new PdfPCell(new Phrase("Livre chapitre"));                header.setHorizontalAlignment(Element.ALIGN_CENTER);                header.setVerticalAlignment(Element.ALIGN_MIDDLE);                PdfPTable body = new PdfPTable(1);                PdfPTable corpsCorps = new PdfPTable(3);                corpsCorps.setWidths(new int[]{ 1, 20, 1});                System.out.println();                                writer2.write("\\clearpage\n\\newpage\n {\n \\setlength\\arrayrulewidth{1pt}\n\\begin{table}\n\\begin{center}\n\\begin{tabular}{ccc|l|ccc}\n\\cline{4-4}\n");                                for(int j = 0; j < ligne[i].length; j++) { // On créer de nouvelles (3) cellules de tableau pour chaque ligne et on remplit ces cellules par le numéro de verset si présent et le texte de la ligne.                    corpsCorps.addCell(Integer.toString(j+1));                    corpsCorps.addCell("phrase très très longue eeeeeeeeeeeeeeeeeeeeeeeeeee test");                    System.out.println(ligne[i][j]);                    corpsCorps.addCell(Integer.toString(j+1));                    writer2.write("&  &  &\\foreignlanguage{greek}{" + ligne[i][j] + "}&  &  &  \\\\\n");                }                                writer2.write(" \\cline{4-4}\n\\end{tabular}\n\\end{center}\n\\end{table}\n}\n");                                PdfPCell corps = new PdfPCell(corpsCorps);                PdfPCell footer = new PdfPCell(new Phrase("p." + (i+1)));                footer.setHorizontalAlignment(Element.ALIGN_CENTER);                footer.setVerticalAlignment(Element.ALIGN_MIDDLE);                                body.addCell(header);                body.addCell(corps);                body.addCell(footer);                                document.add(body);                            }            writer2.write("\\end{document}");            writer2.close();            // grec                        document.close();        } catch (DocumentException e)        {            e.printStackTrace();        } catch (FileNotFoundException e)        {            e.printStackTrace();        }    }}