import com.itextpdf.text.Document;import com.itextpdf.text.pdf.PdfWriter;import com.itextpdf.text.pdf.PdfContentByte;import com.itextpdf.text.pdf.PdfPageEventHelper;class ParagraphBorder extends PdfPageEventHelper {        public boolean active = false;        public void setActive(boolean active) {        this.active = active;    }        public float offset = 5;    public float startPosition;        @Override    public void onParagraph(PdfWriter writer, Document document, float paragraphPosition) {        this.startPosition = paragraphPosition;    }        @Override    public void onParagraphEnd(PdfWriter writer, Document document, float paragraphPosition) {        if (active) {            PdfContentByte cb = writer.getDirectContentUnder();            cb.rectangle(document.left(), paragraphPosition - offset, 20, startPosition - paragraphPosition);            cb.stroke();        }    }}/*getEffectiveStringWidth()            document.setMargins((document.getPageSize()).getWidth()/4, 0, 0, 0);On prend la ligne la plus longue*//* for(int i=0; i < page.length; i++){ Paragraph bloc; if ( i == 0 ) { bloc = new Paragraph(page[i], font); } else { document.newPage(); bloc = new Paragraph(page[i], font); } document.add(bloc); } */            //writer.close();